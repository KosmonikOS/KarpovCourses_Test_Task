from web_page_processor import WebPageProcessor
from course_advisor import CourseAdvisor
from vector_store import VectorStore
from config import COURSE_URLS
from dotenv import load_dotenv
from embedder import Embedder
import streamlit as st
import os

load_dotenv()

# Constants
vector_store_path = os.getenv("VECTOR_STORE_PATH")

# Set page config
st.set_page_config(page_title="–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∫—É—Ä—Å–∞–º", page_icon="üéì", layout="wide")

# Title
st.title("–ù–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –∫—É—Ä—Å–∞–º Karpov.Courses")
st.write("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é!")

# Initialize session state for vectorstore and advisor
if "advisor" not in st.session_state:

    @st.cache_resource(show_spinner=False)
    def initialize_advisor():
        # Initialize embedder
        embedder = Embedder()

        # Initialize or load vectorstore
        if os.path.exists(f"{vector_store_path}.faiss"):
            vectorstore = VectorStore(dimension=embedder.get_embedding_dimension())
            vectorstore.load(vector_store_path)
        else:
            # Process documents
            processor = WebPageProcessor()
            chunks = processor.process_urls(COURSE_URLS)

            # Create embeddings and initialize vectorstore
            embeddings = embedder.get_embeddings(chunks)
            vectorstore = VectorStore(dimension=embedder.get_embedding_dimension())
            vectorstore.add_texts(chunks, embeddings)
            vectorstore.save(vector_store_path)

        # Initialize advisor
        return CourseAdvisor(vectorstore=vectorstore, embedder=embedder)

    with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."):
        st.session_state.advisor = initialize_advisor()

# Query input
query = st.text_input(
    "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –∫—É—Ä—Å–∞—Ö:",
    placeholder="–Ω–∞–ø—Ä–∏–º–µ—Ä: –í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –¥–∞—Ç–∞-–∏–Ω–∂–∏–Ω–∏—Ä–∏–Ω–≥–æ–º?",
)

# Search button
if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç") and query:
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å..."):
        response = st.session_state.advisor.process_query(query)
        st.write(response)
